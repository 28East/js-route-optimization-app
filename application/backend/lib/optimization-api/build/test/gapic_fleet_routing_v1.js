"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
const protos = require("../protos/protos");
const assert = require("assert");
const sinon = require("sinon");
const mocha_1 = require("mocha");
const fleetroutingModule = require("../src");
const google_gax_1 = require("google-gax");
function generateSampleMessage(instance) {
    const filledObject = instance.constructor
        .toObject(instance, { defaults: true });
    return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}
function stubLongRunningCall(response, callError, lroError) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}
function stubLongRunningCallWithCallback(response, callError, lroError) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}
(0, mocha_1.describe)('v1.FleetRoutingClient', () => {
    (0, mocha_1.it)('has servicePath', () => {
        const servicePath = fleetroutingModule.v1.FleetRoutingClient.servicePath;
        assert(servicePath);
    });
    (0, mocha_1.it)('has apiEndpoint', () => {
        const apiEndpoint = fleetroutingModule.v1.FleetRoutingClient.apiEndpoint;
        assert(apiEndpoint);
    });
    (0, mocha_1.it)('has port', () => {
        const port = fleetroutingModule.v1.FleetRoutingClient.port;
        assert(port);
        assert(typeof port === 'number');
    });
    (0, mocha_1.it)('should create a client with no option', () => {
        const client = new fleetroutingModule.v1.FleetRoutingClient();
        assert(client);
    });
    (0, mocha_1.it)('should create a client with gRPC fallback', () => {
        const client = new fleetroutingModule.v1.FleetRoutingClient({
            fallback: true,
        });
        assert(client);
    });
    (0, mocha_1.it)('has initialize method and supports deferred initialization', async () => {
        const client = new fleetroutingModule.v1.FleetRoutingClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.fleetRoutingStub, undefined);
        await client.initialize();
        assert(client.fleetRoutingStub);
    });
    (0, mocha_1.it)('has close method for the initialized client', done => {
        const client = new fleetroutingModule.v1.FleetRoutingClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.initialize();
        assert(client.fleetRoutingStub);
        client.close().then(() => {
            done();
        });
    });
    (0, mocha_1.it)('has close method for the non-initialized client', done => {
        const client = new fleetroutingModule.v1.FleetRoutingClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.fleetRoutingStub, undefined);
        client.close().then(() => {
            done();
        });
    });
    (0, mocha_1.it)('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new fleetroutingModule.v1.FleetRoutingClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert(client.auth.getProjectId.calledWithExactly());
    });
    (0, mocha_1.it)('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new fleetroutingModule.v1.FleetRoutingClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err, projectId) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });
    (0, mocha_1.describe)('optimizeTours', () => {
        (0, mocha_1.it)('invokes optimizeTours without error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursResponse());
            client.innerApiCalls.optimizeTours = stubSimpleCall(expectedResponse);
            const [response] = await client.optimizeTours(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.optimizeTours
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes optimizeTours without error using callback', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursResponse());
            client.innerApiCalls.optimizeTours = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.optimizeTours(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.optimizeTours
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });
        (0, mocha_1.it)('invokes optimizeTours with error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.optimizeTours = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.optimizeTours(request), expectedError);
            assert(client.innerApiCalls.optimizeTours
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes optimizeTours with closed client', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.optimizeTours(request), expectedError);
        });
    });
    (0, mocha_1.describe)('batchOptimizeTours', () => {
        (0, mocha_1.it)('invokes batchOptimizeTours without error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.BatchOptimizeToursRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.batchOptimizeTours = stubLongRunningCall(expectedResponse);
            const [operation] = await client.batchOptimizeTours(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.batchOptimizeTours
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes batchOptimizeTours without error using callback', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.BatchOptimizeToursRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.batchOptimizeTours = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.batchOptimizeTours(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const operation = await promise;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.batchOptimizeTours
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });
        (0, mocha_1.it)('invokes batchOptimizeTours with call error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.BatchOptimizeToursRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.batchOptimizeTours = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.batchOptimizeTours(request), expectedError);
            assert(client.innerApiCalls.batchOptimizeTours
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes batchOptimizeTours with LRO error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.BatchOptimizeToursRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.batchOptimizeTours = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.batchOptimizeTours(request);
            await assert.rejects(operation.promise(), expectedError);
            assert(client.innerApiCalls.batchOptimizeTours
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes checkBatchOptimizeToursProgress without error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = { type_url: 'url', value: Buffer.from('') };
            expectedResponse.metadata = { type_url: 'url', value: Buffer.from('') };
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkBatchOptimizeToursProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert(client.operationsClient.getOperation.getCall(0));
        });
        (0, mocha_1.it)('invokes checkBatchOptimizeToursProgress with error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkBatchOptimizeToursProgress(''), expectedError);
            assert(client.operationsClient.getOperation
                .getCall(0));
        });
    });
});
//# sourceMappingURL=gapic_fleet_routing_v1.js.map